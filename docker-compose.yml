version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: boiler_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: boiler_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    networks:
      - boiler_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: boiler_redis
    ports:
      - "6379:6379"
    networks:
      - boiler_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: boiler_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-change-me-in-production
      - DB_NAME=boiler_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - boiler_network
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: boiler_celery
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=True
      - SECRET_KEY=django-insecure-change-me-in-production
      - DB_NAME=boiler_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - boiler_network
    command: celery -A core worker -l info

  # Nuxt Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: boiler_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - API_BASE_URL=http://backend:8000/api
      - NUXT_HOST=0.0.0.0
      - NUXT_PORT=3000
    depends_on:
      - backend
    networks:
      - boiler_network
    command: npm run dev

  # Nginx (for production)
  nginx:
    image: nginx:alpine
    container_name: boiler_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - boiler_network
    profiles:
      - production

volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  boiler_network:
    driver: bridge